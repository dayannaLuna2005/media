/*
<!--------
////### Resumen breve
Te doy todo listo para:
- Generar automáticamente un JSON con metadata útil (nombre, url raw, tamaño, created_at, updated_at, último autor) usando una GitHub Action que hace commit de `media/list.json`.  
- Un `index.html` que usa ese JSON para mostrar cards, búsqueda por nombre, filtros por tipo y rango de fechas, y contadores de vistas por recurso (local, sin servidor).  

Copia y pega los archivos tal cual, ajusta las variables OWNER/REPO si quieres usar la API pública en cliente; pero con la Action no necesitas llamar a la API: el JSON ya tendrá las fechas y autor.

---

### 1) GitHub Action: generar media/list.json con metadata
Crea `.github/workflows/gen-media-list.yml` en tu repo:

```yaml
name: Generar media/list.json con metadata
on:
  push:
    paths:
      - 'media/**'
      - '.github/workflows/gen-media-list.yml'
jobs:
  gen-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generar media/list.json
        run: |
          set -e
          DIR="media"
          OUT="$DIR/list.json"
          mkdir -p "$DIR"
          # Si no hay archivos, escribir array vacío
          files=$(find "$DIR" -maxdepth 1 -type f ! -name 'list.json' -printf "%f\n" | sort)
          echo "[" > "$OUT"
          first=true
          for f in $files; do
            # obtener tamaño en bytes
            size=$(stat -c%s "$DIR/$f" || stat -f%z "$DIR/$f" || echo 0)
            # last commit info (updated)
            last_json=$(git log -n 1 --pretty=format:'{%n  "sha":"%H",%n  "author_name":"%an",%n  "author_email":"%ae",%n  "date":"%aI"%n}' -- "$DIR/$f" || echo "{}")
            # first commit (creation) - buscar commit más antiguo que afecte el archivo
            first_sha=$(git rev-list --reverse HEAD -- "$DIR/$f" | head -n 1 || true)
            if [ -n "$first_sha" ]; then
              first_json=$(git show -s --pretty=format:'{%n  "sha":"%H",%n  "author_name":"%an",%n  "author_email":"%ae",%n  "date":"%aI"%n}' $first_sha || echo "{}")
            else
              first_json="{}"
            fi
            # escape JSON-safe name
            name=$(printf '%s' "$f" | python3 -c "import json,sys; print(json.dumps(sys.stdin.read().strip())[1:-1])")
            raw_url="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/$(git rev-parse --abbrev-ref HEAD)/media/$f"
            # build object
            obj=$(cat <<EOF
{
  "name": "$name",
  "path": "media/$f",
  "url": "$raw_url",
  "size": $size,
  "last_commit": $last_json,
  "first_commit": $first_json
}
EOF
)
            if [ "$first" = true ]; then
              echo "$obj" >> "$OUT"
              first=false
            else
              echo "," >> "$OUT"
              echo "$obj" >> "$OUT"
            fi
          done
          echo "]" >> "$OUT"
          # commit only if changed
          git add "$OUT"
          if ! git diff --cached --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: actualizar media/list.json (automático)"
            git push
          else
            echo "Sin cambios en $OUT"
          fi
```

Qué hace:
- Escanea `media/` (archivo por archivo), obtiene tamaño, último commit (fecha y autor) y primer commit (fecha de creación aproximada) usando git local en el runner, construye `media/list.json` con objetos completos y hace commit si cambió.  
- Resultado: `media/list.json` será un array de objetos listos para consumir en cliente.

---

### 2) Ejemplo `media/list.json` esperado (ilustración)
Cada elemento tendrá esta forma:

```json
[
  {
    "name": "video1.mp4",
    "path": "media/video1.mp4",
    "url": "https://raw.githubusercontent.com/usuario/repo/main/media/video1.mp4",
    "size": 1234567,
    "last_commit": {"sha":"...", "author_name":"Autor", "author_email":"a@e.com", "date":"2025-09-30T01:00:00Z"},
    "first_commit": {"sha":"...", "author_name":"Autor", "author_email":"a@e.com", "date":"2025-09-01T12:00:00Z"}
  }
]
```

---

### 3) Front-end: `index.html` con cards, búsqueda y filtros por fecha/nombre/tipo y contadores locales
Crea/actualiza `index.html` con este código (todo en un solo archivo). Guarda en la raíz del repo y úsalo en GitHub Pages.

html
-------->

